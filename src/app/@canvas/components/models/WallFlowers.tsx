/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { imageKitLoader } from "@/app/utils/loader";
import { useLoader } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    DRose_001: THREE.Mesh;
    WallVase: THREE.Mesh;
  };
  materials: {
    DesertRoseSmallTex: THREE.MeshPhysicalMaterial;
    Vase: THREE.MeshStandardMaterial;
  };
};

export function WallFlowers(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(
    "/models/wall-flowers-opt.glb"
  ) as GLTFResult;
  const [colorMap, normalMap, roughnessMap, metalnessMap] = useTexture(
    [
      "/textures/VeneerWhiteOakRandomMatched001-4K/VeneerWhiteOakRandomMatched001_COL_4K_METALNESS.png",
      "/textures/VeneerWhiteOakRandomMatched001-4K/VeneerWhiteOakRandomMatched001_NRM_4K_METALNESS.png",
      "/textures/VeneerWhiteOakRandomMatched001-4K/VeneerWhiteOakRandomMatched001_ROUGHNESS_4K_METALNESS.png",
      "/textures/VeneerWhiteOakRandomMatched001-4K/VeneerWhiteOakRandomMatched001_METALNESS_4K_METALNESS.png",
    ].map((src) => imageKitLoader({ src }))
  ).map((texture) => {
    texture.flipY = false;
    return texture;
  });
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.DRose_001.geometry}
        material={materials.DesertRoseSmallTex}
        position={[0.008, -0.053, 0.163]}
        scale={0.099}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.WallVase.geometry}
        position={[0, -0.013, 0.101]}
        scale={0.1}
      >
        <meshStandardMaterial
          map={colorMap}
          normalMap={normalMap}
          metalnessMap={metalnessMap}
          roughnessMap={roughnessMap}
        />
      </mesh>
    </group>
  );
}
