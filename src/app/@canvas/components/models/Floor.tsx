/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useLoader } from "@react-three/fiber";
import { imageKitLoader } from "@/app/utils/loader";

type GLTFResult = GLTF & {
  nodes: {
    MainFloor: THREE.Mesh;
  };
  materials: {
    Floor: THREE.MeshStandardMaterial;
  };
};

export function Floor(props: JSX.IntrinsicElements["group"]) {
  const [
    colorMap,
    displacementMap,
    normalMap,
    roughnessMap,
    metalnessMap,
    aoMap,
  ] = useLoader(
    THREE.TextureLoader,
    [
      "/textures/VeneerWhiteOakRandomMatched001-4K/VeneerWhiteOakRandomMatched001_COL_4K_METALNESS.png",
      "/textures/VeneerWhiteOakRandomMatched001-4K/VeneerWhiteOakRandomMatched001_DISP16_4K_METALNESS.png",
      "/textures/VeneerWhiteOakRandomMatched001-4K/VeneerWhiteOakRandomMatched001_NRM_4K_METALNESS.png",
      "/textures/VeneerWhiteOakRandomMatched001-4K/VeneerWhiteOakRandomMatched001_ROUGHNESS_4K_METALNESS.png",
      "/textures/VeneerWhiteOakRandomMatched001-4K/VeneerWhiteOakRandomMatched001_METALNESS_4K_METALNESS.png",
      "/textures/VeneerWhiteOakRandomMatched001-4K/VeneerWhiteOakRandomMatched001_AO_4K_METALNESS.png",
    ].map((src) => imageKitLoader({ src, quality: "50" }))
  ).map((texture) => {
    texture.rotation = Math.PI * -0.25;
    return texture;
  });

  return (
    <group {...props} dispose={null}>
      <mesh
        position={[0, 0, -0.215]}
        rotation={new THREE.Euler(0, 0, 0)}
        receiveShadow
      >
        <meshStandardMaterial
          map={colorMap}
          aoMap={aoMap}
          normalMap={normalMap}
          roughnessMap={roughnessMap}
          metalnessMap={metalnessMap}
          displacementMap={displacementMap}
        />
        <planeGeometry args={[8, 5]} />
      </mesh>
    </group>
  );
}

useGLTF.preload("/models/floor.glb");
