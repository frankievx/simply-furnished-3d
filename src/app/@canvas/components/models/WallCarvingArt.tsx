/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useLoader } from "@react-three/fiber";
import { imageKitLoader } from "@/app/utils/loader";

type GLTFResult = GLTF & {
  nodes: {
    WallCarvingArt: THREE.Mesh;
  };
  materials: {
    WalledDecoration002_Mat_LOD0_4K_VAR1_4K: THREE.MeshStandardMaterial;
  };
};

export function WallCarvingArt(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF(
    "/models/WallCarvingArt/WallCarvingArt.glb"
  ) as GLTFResult;

  const [map, roughnessMap, metalnessMap, aoMap] = useLoader(
    THREE.TextureLoader,
    [
      "/models/WallCarvingArt/WalledDecoration002_COL_4K_METALNESS.png",
      // "/models/WallCarvingArt/WalledDecoration002_NRM16_4K_LOD0_METALNESS.png",
      "/models/WallCarvingArt/WalledDecoration002_ROUGHNESS_4K_METALNESS.png",
      "/models/WallCarvingArt/WalledDecoration002_METALNESS_4K_METALNESS.png",
      "/models/WallCarvingArt/WalledDecoration002_AO_4K_METALNESS.png",
    ].map((src) => imageKitLoader({ src, quality: "50" }))
  ).map((texture) => {
    texture.flipY = false;
    return texture;
  });
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.WallCarvingArt.geometry}
        position={[1, 0, 1.85]}
        rotation={[0, 1.567, 0]}
        scale={1.3}
      >
        <meshStandardMaterial
          map={map}
          // normalMap={normalMap}
          roughnessMap={roughnessMap}
          metalnessMap={metalnessMap}
          aoMap={aoMap}
          // displacementMap={dispMap}
        />
      </mesh>
    </group>
  );
}

useGLTF.preload("/WallCarvingArt.glb");
