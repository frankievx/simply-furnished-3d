/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    plant001: THREE.Mesh;
    plant001_1: THREE.Mesh;
    plant001_2: THREE.Mesh;
    plant001_3: THREE.Mesh;
    plant001_4: THREE.Mesh;
  };
  materials: {
    ["Pot.002"]: THREE.MeshStandardMaterial;
    ["leaves.001"]: THREE.MeshStandardMaterial;
    ["Procedural Lemon"]: THREE.MeshStandardMaterial;
    ["bark.001"]: THREE.MeshStandardMaterial;
    ["bark.002"]: THREE.MeshStandardMaterial;
  };
};

export function LemonTree(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/models/lemon-tree.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.plant001.geometry}
        material={materials["Pot.002"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.plant001_1.geometry}
        material={materials["leaves.001"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.plant001_2.geometry}
        material={materials["Procedural Lemon"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.plant001_3.geometry}
        material={materials["bark.001"]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.plant001_4.geometry}
        material={materials["bark.002"]}
      />
    </group>
  );
}

useGLTF.preload("/models/lemon-tree.glb");
